generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ─────────────────────────────────────────────────────────────────────────────
// User
// ─────────────────────────────────────────────────────────────────────────────
model User {
  id        String   @id 
  firstname String
  lastname  String
  createdAt DateTime @default(now())
  clerkid   String
  image     String?
  stripeId  String?

  // Relations
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")

  // A user can create many groups
  groupsCreated Group[]

  // A user can belong to many groups through the Members join table
  members   Members[]
}

// ─────────────────────────────────────────────────────────────────────────────
// Group
// ─────────────────────────────────────────────────────────────────────────────
model Group {
  id              String        @id 
  name            String        @unique
  category        String
  thumbnail       String?
  description     String?
  gallery         String[]
  jsonDescription String?
  htmlDescription String?
  icon            String?
  privacy         GROUP_PRIVACY @default(PRIVATE)
  active          Boolean       @default(false)
  createdAt       DateTime      @default(now())

  // One user "owns" or creates this group
  userId  String 
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Many members can belong to this group
  members   Members[]
  channel   Channel[]
  courses   Course[]
  affiliate Affiliate?
  domain    String?

  // 1:1 relationship with Subscription
  subscription Subscription?
}

// ─────────────────────────────────────────────────────────────────────────────
// Members (join table for User ↔ Group)
// ─────────────────────────────────────────────────────────────────────────────
model Members {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())

  user     User?   @relation(fields: [userId], references: [id])
  userId   String? 

  group    Group?  @relation(fields: [groupId], references: [id])
  groupId  String? 

  @@index([userId, groupId])
}

// ─────────────────────────────────────────────────────────────────────────────
// Subscription (1:1 with Group)
// ─────────────────────────────────────────────────────────────────────────────
model Subscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  price     Int?
  active    Boolean  @default(false)

  // To make it truly one-to-one, `groupId` must be unique.
  group   Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String? @unique 
}

// ─────────────────────────────────────────────────────────────────────────────
// Post
// ─────────────────────────────────────────────────────────────────────────────
model Post {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now())
  title       String?
  htmlContent String?
  jsonContent String?
  content     String

  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String  

  likes     Like[]
  comments  Comment[]

  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String  
}

// ─────────────────────────────────────────────────────────────────────────────
// Like
// ─────────────────────────────────────────────────────────────────────────────
model Like {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String 
}

// ─────────────────────────────────────────────────────────────────────────────
// Comment
// ─────────────────────────────────────────────────────────────────────────────
model Comment {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime  @default(now())
  content    String

  post       Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String    @db.Uuid

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    

  replied    Boolean?  @default(false)

  // Self-relation for replies
  reply      Comment[] @relation(name: "CommentToComment")
  Comment    Comment?  @relation(name: "CommentToComment", fields: [commentId], references: [id])
  commentId  String?   @db.Uuid
}

// ─────────────────────────────────────────────────────────────────────────────
// Channel
// ─────────────────────────────────────────────────────────────────────────────
model Channel {
  id        String   @id 
  name      String
  icon      String
  createdAt DateTime @default(now())

  posts     Post[]
  Group     Group?  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String  
}

// ─────────────────────────────────────────────────────────────────────────────
// Course
// ─────────────────────────────────────────────────────────────────────────────
model Course {
  id          String   @id  @db.Uuid
  name        String
  thumbnail   String
  published   Boolean  @default(false)
  privacy     String
  description String
  createdAt   DateTime @default(now())

  Group       Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String?  

  modules     Module[]
}

// ─────────────────────────────────────────────────────────────────────────────
// Module
// ─────────────────────────────────────────────────────────────────────────────
model Module {
  id        String   @id @db.Uuid
  title     String
  createdAt DateTime @default(now())

  Course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String?  @db.Uuid

  section   Section[]
}

// ─────────────────────────────────────────────────────────────────────────────
// Section
// ─────────────────────────────────────────────────────────────────────────────
model Section {
  id          String   @id @db.Uuid
  name        String   @default("New Section")
  icon        String   @default("doc")
  complete    Boolean  @default(false)
  createdAt   DateTime @default(now())

  Module      Module?  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String?  @db.Uuid

  content     String?
  htmlContent String?
  jsonContent String?
}

// ─────────────────────────────────────────────────────────────────────────────
// Affiliate
// ─────────────────────────────────────────────────────────────────────────────
model Affiliate {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())

  Group     Group?   @relation(fields: [groupId], references: [id])
  groupId   String?  @unique 
}

// ─────────────────────────────────────────────────────────────────────────────
// Message (sender/receiver both reference User)
// ─────────────────────────────────────────────────────────────────────────────
model Message {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  createdAt  DateTime @default(now())

  sender     User?    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String?  

  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String?  
}

// ─────────────────────────────────────────────────────────────────────────────
// Enum
// ─────────────────────────────────────────────────────────────────────────────
enum GROUP_PRIVACY {
  PUBLIC
  PRIVATE
}
